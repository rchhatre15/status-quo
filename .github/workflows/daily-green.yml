name: daily-green

on:
  # run every 20 minutes + allow manual test runs
  schedule:
    - cron: "*/20 * * * *"
  workflow_dispatch:
    inputs:
      force:
        description: "Commit immediately (for manual testing)"
        required: false
        default: "false"

permissions:
  contents: write  # needed to push commits back to the repo

jobs:
  make-green:
    runs-on: ubuntu-latest

    steps:
      - name: (Optional) Force run now if manually triggered
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.force == 'true' }}
        run: echo "RUN_NOW=true" >> $GITHUB_ENV

      - name: Decide today's random slot (America/New_York)
        # Pick one random 20-minute slot between 9:00 and 18:00 local.
        # Slots: 9:00..17:40 (every 20m) + 18:00 exactly (no 18:20/18:40).
        env:
          TZ: America/New_York
        run: |
          if [ "${RUN_NOW:-}" = "true" ]; then exit 0; fi
          date_str=$(date +%Y-%m-%d)
          seed="$date_str $GITHUB_REPOSITORY"
          # 28 slots total: 9h*3 + 1 (18:00)
          idx=$(( 0x$(echo -n "$seed" | sha256sum | cut -c1-8) % 28 ))
          if [ "$idx" -lt 27 ]; then
            h=$((9 + idx / 3))
            m20=$((idx % 3))
          else
            h=18; m20=0
          fi
          now_h=$(date +%H)
          now_m=$(date +%M); now_m20=$((10#$now_m / 20))
          echo "Target slot (NY): $h:$((m20*20)) â€” Now: $now_h:$now_m"
          if [ "$h" -eq "$now_h" ] && [ "$m20" -eq "$now_m20" ]; then
            echo "RUN_NOW=true" >> $GITHUB_ENV
          fi

      - name: Check out default branch
        if: env.RUN_NOW == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Set up Python
        if: env.RUN_NOW == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'  # speeds up installs

      - name: Install deps
        if: env.RUN_NOW == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pandas python-dateutil

      - name: Generate market snapshot (BTC, VOO, Gold)
        if: env.RUN_NOW == 'true'
        run: |
          python - <<'PY'
          import os, json
          from datetime import datetime, timedelta
          from zoneinfo import ZoneInfo
          import pandas as pd
          import yfinance as yf

          # --- Config ---
          ASSETS = {
            "BTC":  {"ticker": "BTC-USD",   "name": "Bitcoin",                    "unit": "USD"},   # Yahoo symbol
            "VOO":  {"ticker": "VOO",       "name": "Vanguard S&P 500 ETF",       "unit": "USD"},
            "GOLD": {"ticker": "XAUUSD=X",  "name": "Gold spot (XAU/USD)",        "unit": "USD/oz"}
          }
          WINDOWS = [("1d",1), ("1w",7), ("1m",30), ("6m",182), ("1y",365), ("5y",1826)]
          LOOKBACK_YEARS = 8  # ensures 5y window has data

          # Pull daily history for all tickers at once (adjusted=total-return friendly for ETFs)
          tickers = " ".join(v["ticker"] for v in ASSETS.values())
          data = yf.download(tickers=tickers, period=f"{LOOKBACK_YEARS}y", interval="1d",
                             group_by='ticker', auto_adjust=False, progress=False)

          def latest_series(tkr):
            df = data[tkr] if isinstance(data.columns, pd.MultiIndex) else data
            # Prefer Adj Close if available (dividends/splits), else Close
            col = "Adj Close" if "Adj Close" in df.columns else "Close"
            return df[col].dropna()

          def pct_change_from(series, days_back):
            # Compare last available close to the close on or BEFORE target calendar date
            if series.empty: return None
            last_date = series.index[-1]
            past_target = last_date - timedelta(days=days_back)
            past_series = series.loc[:past_target]
            if past_series.empty: return None
            last = float(series.iloc[-1])
            past = float(past_series.iloc[-1])
            return None if past == 0 else (last/past - 1.0) * 100.0

          tz = ZoneInfo("America/New_York")
          today_local = datetime.now(tz).strftime("%Y-%m-%d")
          os.makedirs("pulse", exist_ok=True)

          out = {
            "date_local": today_local,
            "as_of_close": {},   # per-asset last close date
            "assets": {}         # per-asset snapshot & returns
          }

          for key, meta in ASSETS.items():
            try:
              s = latest_series(meta["ticker"])
              if s.empty:
                out["assets"][key] = {"error": "no_data", **meta}
                continue
              last_date = s.index[-1].date().isoformat()
              last_price = float(s.iloc[-1])
              changes = {}
              for label, days in WINDOWS:
                chg = pct_change_from(s, days)
                changes[label] = None if chg is None else round(chg, 2)
              out["as_of_close"][key] = last_date
              out["assets"][key] = {
                **meta,
                "price": round(last_price, 2),
                "currency": "USD",
                "changes_pct": changes,
                "note": "Changes use last available daily close; if markets were closed on the exact target day, we use the closest prior trading day."
              }
            except Exception as e:
              out["assets"][key] = {"error": str(e), **meta}

          path = f"pulse/{today_local}.json"
          with open(path, "w") as f:
            json.dump(out, f, indent=2)
          print("Wrote", path)
          PY

      - name: Commit and push
        if: env.RUN_NOW == 'true'
        run: |
          git config user.name "${{ vars.COMMIT_NAME || 'daily-bot' }}"
          git config user.email "${{ secrets.COMMIT_EMAIL }}"
          git add -A
          # Use local NY date in the message for easy reading
          git commit -m "daily pulse: $(TZ=America/New_York date +%F) [skip ci]" || { echo "Nothing to commit"; exit 0; }
          git push origin HEAD:${{ github.event.repository.default_branch }}
